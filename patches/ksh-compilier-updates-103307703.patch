diff --git src/cmd/ksh93/data/math.tab src/cmd/ksh93/data/math.tab
index 3750c15..300ac05 100644
--- src/cmd/ksh93/data/math.tab
+++ src/cmd/ksh93/data/math.tab
@@ -20,7 +20,6 @@ f 1 exp2
 f 1 expm1
 f 1 fabs abs
 f 2 fdim
-f 1 finite
 f 1 floor int
 f 3 fma
 f 2 fmax
diff --git src/cmd/ksh93/edit/edit.c src/cmd/ksh93/edit/edit.c
index a565966..b2b24d9 100644
--- src/cmd/ksh93/edit/edit.c
+++ src/cmd/ksh93/edit/edit.c
@@ -30,6 +30,7 @@
 #include	<ast.h>
 #include	<errno.h>
 #include	<ccode.h>
+#include 	<sys/ioctl.h>
 #include	"FEATURE/options"
 #include	"FEATURE/time"
 #include	"FEATURE/cmds"
@@ -1851,7 +1852,7 @@ int	sh_ioctl(int fd, int cmd, void* val, int sz)
 
 #ifdef _lib_tcgetattr
 #   undef tcgetattr
-    sh_tcgetattr(int fd, struct termios *tty)
+int sh_tcgetattr(int fd, struct termios *tty)
     {
 	int r,err = errno;
 	while((r=tcgetattr(fd,tty)) < 0 && errno==EINTR)
@@ -1860,7 +1861,7 @@ int	sh_ioctl(int fd, int cmd, void* val, int sz)
     }
 
 #   undef tcsetattr
-    sh_tcsetattr(int fd, int cmd, struct termios *tty)
+int sh_tcsetattr(int fd, int cmd, struct termios *tty)
     {
 	int r,err = errno;
 	while((r=tcsetattr(fd,cmd,tty)) < 0 && errno==EINTR)
diff --git src/lib/libast/features/aso src/lib/libast/features/aso
index cf97abf..fce4bdf 100644
--- src/lib/libast/features/aso
+++ src/lib/libast/features/aso
@@ -21,7 +21,7 @@ if	aso note{ gcc 4.1+ 64 bit memory atomic operations model }end link{
 		#define _aso_inc64(p)		__sync_fetch_and_add(p,1)
 		#define _aso_dec64(p)		__sync_fetch_and_sub(p,1)
 		#if _ast_sizeof_pointer == 8
-		#define _aso_casptr(p,o,n)	((void*)__sync_val_compare_and_swap(p,(uint64_t)o,(uint64_t)n))
+		#define _aso_casptr(p,o,n)	((void*)__sync_val_compare_and_swap((uint64_t*)p,(uint64_t)o,(uint64_t)n))
 		#else
-		#define _aso_casptr(p,o,n)	((void*)__sync_val_compare_and_swap(p,(uint32_t)o,(uint32_t)n))
+		#define _aso_casptr(p,o,n)	((void*)__sync_val_compare_and_swap((uint32_t*)p,(uint32_t)o,(uint32_t)n))
 		#endif
diff --git src/lib/libast/port/astwinsize.c src/lib/libast/port/astwinsize.c
index d60ba75..dd1f67d 100644
--- src/lib/libast/port/astwinsize.c
+++ src/lib/libast/port/astwinsize.c
@@ -28,6 +28,7 @@
 
 #include <ast.h>
 #include <ast_tty.h>
+#include <sys/ioctl.h>
 
 #if defined(__STDPP__directive) && defined(__STDPP__hide)
 __STDPP__directive pragma pp:hide ioctl sleep
diff --git src/lib/libast/uwin/erf.c src/lib/libast/uwin/erf.c
index 4a61f78..e4239fd 100644
--- src/lib/libast/uwin/erf.c
+++ src/lib/libast/uwin/erf.c
@@ -270,7 +270,7 @@ extern double erf(x)
 	double x;
 {
 	double R,S,P,Q,ax,s,y,z,r,fabs(),exp();
-	if(!finite(x)) {		/* erf(nan)=nan */
+	if(!isfinite(x)) {		/* erf(nan)=nan */
 	    if (isnan(x))
 		return(x);
 	    return (x > 0 ? one : -one); /* erf(+/-inf)= +/-1 */
diff --git src/lib/libast/uwin/exp.c src/lib/libast/uwin/exp.c
index d1e15bd..e527879 100644
--- src/lib/libast/uwin/exp.c
+++ src/lib/libast/uwin/exp.c
@@ -48,7 +48,7 @@ static char sccsid[] = "@(#)exp.c	8.1 (Berkeley) 6/4/93";
  * Required system supported functions:
  *	scalb(x,n)	
  *	copysign(x,y)	
- *	finite(x)
+ *	isfinite(x)
  *
  * Method:
  *	1. Argument Reduction: given the input x, find r and integer k such 
@@ -151,7 +151,7 @@ double x;
 
 		else 
 		     /* exp(-big#) underflows to zero */
-		     if(finite(x))  return(scalb(1.0,-5000));
+		     if(isfinite(x))  return(scalb(1.0,-5000));
 
 		     /* exp(-INF) is zero */
 		     else return(0.0);
@@ -160,7 +160,7 @@ double x;
 
 	else 
 	/* exp(INF) is INF, exp(+big#) overflows to INF */
-	    return( finite(x) ?  scalb(1.0,5000)  : x);
+	    return( isfinite(x) ?  scalb(1.0,5000)  : x);
 }
 
 #endif
@@ -198,7 +198,7 @@ double x, c;
 
 		else 
 		     /* exp(-big#) underflows to zero */
-		     if(finite(x))  return(scalb(1.0,-5000));
+		     if(isfinite(x))  return(scalb(1.0,-5000));
 
 		     /* exp(-INF) is zero */
 		     else return(0.0);
@@ -207,7 +207,7 @@ double x, c;
 
 	else 
 	/* exp(INF) is INF, exp(+big#) overflows to INF */
-	    return( finite(x) ?  scalb(1.0,5000)  : x);
+	    return( isfinite(x) ?  scalb(1.0,5000)  : x);
 }
 
 #endif
diff --git src/lib/libast/uwin/gamma.c src/lib/libast/uwin/gamma.c
index 0cb1d1f..8e67ce8 100644
--- src/lib/libast/uwin/gamma.c
+++ src/lib/libast/uwin/gamma.c
@@ -164,7 +164,7 @@ extern double gamma(x)
 			else return (one/x);
 		one+1e-20;		/* Raise inexact flag. */
 		return (one/x);
-	} else if (!finite(x)) {
+	} else if (!isfinite(x)) {
 		if (_IEEE)		/* x = NaN, -Inf */
 			return (x*x);
 		else
diff --git src/lib/libast/uwin/lgamma.c src/lib/libast/uwin/lgamma.c
index d37357d..8bf027a 100644
--- src/lib/libast/uwin/lgamma.c
+++ src/lib/libast/uwin/lgamma.c
@@ -154,7 +154,7 @@ extern __pure double lgamma(double x)
 	signgam = 1;
 	endian = ((*(int *) &one)) ? 1 : 0;
 
-	if (!finite(x))
+	if (!isfinite(x))
 		if (_IEEE)
 			return (x+x);
 		else return (infnan(EDOM));
diff --git src/lib/libast/uwin/log.c src/lib/libast/uwin/log.c
index e9365a3..5892340 100644
--- src/lib/libast/uwin/log.c
+++ src/lib/libast/uwin/log.c
@@ -392,7 +392,7 @@ log(x) double x;
 			return (infnan(-ERANGE));
 		else
 			return (infnan(EDOM));
-	else if (!finite(x))
+	else if (!isfinite(x))
 		if (_IEEE)		/* x = NaN, Inf */
 			return (x+x);
 		else
diff --git src/lib/libast/uwin/log1p.c src/lib/libast/uwin/log1p.c
index 1fad21f..2a709f9 100644
--- src/lib/libast/uwin/log1p.c
+++ src/lib/libast/uwin/log1p.c
@@ -127,7 +127,7 @@ double x;
 	if(x!=x) return(x);	/* x is NaN */
 #endif	/* !defined(vax)&&!defined(tahoe) */
 
-	if(finite(x)) {
+	if(isfinite(x)) {
 	   if( x > negone ) {
 
 	   /* argument reduction */
diff --git src/lib/libast/uwin/support.c src/lib/libast/uwin/support.c
index 769444e..a2b4134 100644
--- src/lib/libast/uwin/support.c
+++ src/lib/libast/uwin/support.c
@@ -68,7 +68,7 @@ static char sccsid[] = "@(#)support.c	8.1 (Berkeley) 6/4/93";
  *              returns the unbiased exponent of x, a signed integer in 
  *              double precision, except that logb(0) is -INF, logb(INF) 
  *              is +INF, and logb(NAN) is that NAN.
- * (d) finite(x) 
+ * (d) finite(x)
  *              returns the value TRUE if -INF < x < +INF and returns 
  *              FALSE otherwise.
  *
@@ -362,7 +362,7 @@ double x;
 	}
 
     /* sqrt(INF) is INF */
-        if(!finite(x)) return(x);               
+        if(!isfinite(x)) return(x);
 
     /* scale x to [1,4) */
         n=logb(x);
diff --git src/lib/libcmd/tail.c src/lib/libcmd/tail.c
index ce52f9f..4a78ca6 100644
--- src/lib/libcmd/tail.c
+++ src/lib/libcmd/tail.c
@@ -102,6 +102,7 @@ USAGE_LICENSE
 #include <cmd.h>
 #include <ctype.h>
 #include <ls.h>
+#include <time.h>
 #include <tv.h>
 #include <rev.h>
 
